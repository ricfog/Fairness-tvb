source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Simulations/Bounds.R', echo=TRUE)
rm(list=ls())
# ------------------------------------------------------------------------------
## load packages
library(dplyr)
library(readr)
library(ggplot2)
library(here)
here()
# ------------------------------------------------------------------------------
## load packages
df <- read_csv(here('Recidivism-tvb', 'Paper', 'Bounds', 'Simulations', 'datasets', 'compas', 'COMPAS_score_test.csv'),
col_types = cols())
df <- read_csv(here('Recidivism-tvb', 'Paper', 'Bounds', 'Simulations', 'datasets', 'compas', 'COMPAS_score_test.csv'),
col_types = cols())
df$decile_score
rm(list=ls())
# ------------------------------------------------------------------------------
## load packages
library(dplyr)
library(readr)
library(ggplot2)
library(here)
here()
# ------------------------------------------------------------------------------
## load and subset data
raw.data <- read_csv(here('DATA', 'COMPAS', 'compas-scores-two-years.csv'),
col_types = cols()) %>%
filter(race == 'African-American' | race == 'Caucasian')
# Filter data
crime.data <- raw.data %>%
# filter(days_b_screening_arrest <= 30) %>%
# filter(days_b_screening_arrest >= -30) %>%
filter(two_year_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A')
# Length of stay column
crime.data$length_of_stay <- as.numeric(as.Date(crime.data$c_jail_out) - as.Date(crime.data$c_jail_in))
# Reduce to just white and black defendants
df <- crime.data %>%
filter(race %in% c("African-American", "Caucasian")) %>%
mutate(race = factor(race))
# Extract data of interest
df.sub <- df %>%
select(sex, age, race, juv_fel_count, juv_misd_count, juv_other_count, priors_count,
c_charge_degree, two_year_recid, decile_score)
# ------------------------------------------------------------------------------
## Random splitting, stratified
# Randomly split into train and test
set.seed(1)
df.sub <- df.sub %>%
group_by(race, two_year_recid) %>%
mutate(random = sample(n()),
in.train = as.numeric(random <= 0.7*n()),
in.valid = as.numeric(random <= 0.2*n())) %>%
select(-random) %>%
ungroup()
# Check sampling
df.sub %>%
count(in.train, race, two_year_recid)
# create dummies
df.sub.matrix <- as_tibble(model.matrix(~ . - 1, data = df.sub)) %>%
select(-sexMale)
##
# Output train and test data + COMPAS scores
train.df <- df.sub.matrix %>%
filter(in.train == 1) %>%
select(-in.train, -in.valid, -decile_score)
test.df <- df.sub.matrix %>%
filter(in.train == 0) %>%
select(-in.train, -in.valid, -decile_score)
test.df %>% mutate(Risk = ifelse(decile_score > 6, 1, 0)) %>% group_by(Risk) %>% summarise(n = n(), prop = n/sum(n))
rm(list=ls())
# ------------------------------------------------------------------------------
## load packages
library(dplyr)
library(readr)
library(ggplot2)
library(here)
here()
# ------------------------------------------------------------------------------
## load packages
df <- read_csv(here('Recidivism-tvb', 'Paper', 'Bounds', 'Simulations', 'datasets', 'compas', 'COMPAS_score_test.csv'),
col_types = cols())
Risk = ifelse(df$decile_score>6, 1, 0)
mean(Risk)
Risk = ifelse(df$decile_score>=6, 1, 0)
Risk
mean(Risk)
rm(list = ls())
# ------------------------------------------------------------------------------
## load packages
library(dplyr)
library(readr)
library(ggplot2)
library(here)
here()
# ------------------------------------------------------------------------------
## load and subset data
# load data
df.train <- read_csv(here('Recidivism-tvb', 'Paper', 'Bounds', 'Simulations', 'datasets', 'compas', 'train_and_validation.csv'))
df.test <- read_csv(here('Recidivism-tvb', 'Paper', 'Bounds', 'Simulations', 'datasets', 'compas', 'test.csv'))
# regress and predict
logit.train <- glm(two_year_recid ~ ., data = df.train, family = binomial())
train.predictions <- predict(logit.train, newdata = df.train, type = 'response')
test.predictions <- predict(logit.train, newdata = df.test, type = "response")
mean(test.predictions > 0.55)
mean(test.predictions > 0.50)
mean(test.predictions > 0.53)
source(here('Recidivism-tvb', 'Paper', 'Bounds', 'functions_bounds.R'))
raw.data <- read_csv(here('DATA', 'COMPAS', 'compas-scores-two-years.csv'),
col_types = cols()) %>%
filter(race == 'African-American' | race == 'Caucasian')
# Filter data
crime.data <- raw.data %>%
# filter(days_b_screening_arrest <= 30) %>%
# filter(days_b_screening_arrest >= -30) %>%
filter(two_year_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A')
# Length of stay column
crime.data$length_of_stay <- as.numeric(as.Date(crime.data$c_jail_out) - as.Date(crime.data$c_jail_in))
# Reduce to just white and black defendants
df <- crime.data %>%
filter(race %in% c("African-American", "Caucasian")) %>%
mutate(race = factor(race))
# Extract data of interest
df.sub <- df %>%
select(race, decile_score, two_year_recid)  %>%
# add Propublica's low/high scores
mutate(risk = ifelse(decile_score > 4, 1, 0))
metrics_alpha_1 <- list(tb_race, list(0.125, 0)) %>%
purrr::pmap( ~ .x %>% compute_metrics_alpha_1(.y)) %>%
dplyr::bind_rows(.id = 'Race') %>%
rename(Metric = ind)
rm(list=ls())
# ------------------------------------------------------------------------------
## load packages
library(dplyr)
library(readr)
library(ggplot2)
library(here)
here()
source(here('Recidivism-tvb', 'Paper', 'Bounds', 'functions_bounds.R'))
# ------------------------------------------------------------------------------
## load and subset data
raw.data <- read_csv(here('DATA', 'COMPAS', 'compas-scores-two-years.csv'),
col_types = cols()) %>%
filter(race == 'African-American' | race == 'Caucasian')
# Filter data
crime.data <- raw.data %>%
# filter(days_b_screening_arrest <= 30) %>%
# filter(days_b_screening_arrest >= -30) %>%
filter(two_year_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A')
# Length of stay column
crime.data$length_of_stay <- as.numeric(as.Date(crime.data$c_jail_out) - as.Date(crime.data$c_jail_in))
# Reduce to just white and black defendants
df <- crime.data %>%
filter(race %in% c("African-American", "Caucasian")) %>%
mutate(race = factor(race))
# Extract data of interest
df.sub <- df %>%
select(race, decile_score, two_year_recid)  %>%
# add Propublica's low/high scores
mutate(risk = ifelse(decile_score > 4, 1, 0))
# ------------------------------------------------------------------------------
## Compute and plot bounds for error rates: varying alpha
# create tables
tb_race <- list(White = df.sub %>% filter(race == 'Caucasian'),
Black = df.sub %>% filter(race == 'African-American')) %>%
# create table
purrr::map( ~ table(.x$two_year_recid, .x$risk))
# compute metrics and reformat into df
metric <- list(FPR = tb_race %>% purrr::map_dfr(~ fpr_compute(.x), .id = 'Race'),
FNR = tb_race %>% purrr::map_dfr(~ fnr_compute(.x), .id = 'Race'),
PPV = tb_race %>% purrr::map_dfr(~ ppv_compute(.x), .id = 'Race')
) %>%
#purrr::map( ~ .x %>%
#              dplyr::bind_rows(.id = 'Metric')) %>%
dplyr::bind_rows(.id = 'Metric') %>%
rename(Type = ind)
## Plot for varyng alpha
## plot
ggplot(metric %>%
filter((Race == 'Black' & Type == 'obs') | (Race == 'White' & Type != 'obs')),
aes(alpha, values)) +
# lines
geom_path(aes(alpha, values,
group = paste0(Race, Metric, Type),
linetype = Metric, col = Race),
size = 2) +
# set color manually
scale_color_manual(values = c('grey60', "#E69F00")) +
facet_grid(~ Method) +
# set limit x axis
xlim(0,0.2) +
ylim(0,1) +
# other theme
theme_bw() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=25)) +
labs(x = expression(alpha),
y = 'Classification metric value')
ggsave(width = 12, height = 6, here('Recidivism-tvb', 'Plots', 'Bounds_error_rates.pdf'))
rm(list=ls())
# ------------------------------------------------------------------------------
## load packages
library(dplyr)
library(readr)
library(ggplot2)
library(here)
here()
source(here('Recidivism-tvb', 'Paper', 'Bounds', 'functions_bounds.R'))
# ------------------------------------------------------------------------------
## load and subset data
raw.data <- read_csv(here('DATA', 'COMPAS', 'compas-scores-two-years.csv'),
col_types = cols()) %>%
filter(race == 'African-American' | race == 'Caucasian')
# Filter data
crime.data <- raw.data %>%
# filter(days_b_screening_arrest <= 30) %>%
# filter(days_b_screening_arrest >= -30) %>%
filter(two_year_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A')
# Length of stay column
crime.data$length_of_stay <- as.numeric(as.Date(crime.data$c_jail_out) - as.Date(crime.data$c_jail_in))
# Reduce to just white and black defendants
df <- crime.data %>%
filter(race %in% c("African-American", "Caucasian")) %>%
mutate(race = factor(race))
# Extract data of interest
df.sub <- df %>%
select(race, decile_score, two_year_recid)  %>%
# add Propublica's low/high scores
mutate(risk = ifelse(decile_score > 4, 1, 0))
# ------------------------------------------------------------------------------
## Compute and plot bounds for error rates: varying alpha
# create tables
tb_race <- list(White = df.sub %>% filter(race == 'Caucasian'),
Black = df.sub %>% filter(race == 'African-American')) %>%
# create table
purrr::map( ~ table(.x$two_year_recid, .x$risk))
# compute metrics and reformat into df
metric <- list(FPR = tb_race %>% purrr::map_dfr(~ fpr_compute(.x), .id = 'Race'),
FNR = tb_race %>% purrr::map_dfr(~ fnr_compute(.x), .id = 'Race'),
PPV = tb_race %>% purrr::map_dfr(~ ppv_compute(.x), .id = 'Race')
) %>%
#purrr::map( ~ .x %>%
#              dplyr::bind_rows(.id = 'Metric')) %>%
dplyr::bind_rows(.id = 'Metric') %>%
rename(Type = ind)
## Plot for varyng alpha
## plot
ggplot(metric %>%
filter((Race == 'Black' & Type == 'obs') | (Race == 'White' & Type != 'obs')),
aes(alpha, values)) +
# lines
geom_path(aes(alpha, values,
group = paste0(Race, Metric, Type),
linetype = Metric, col = Race),
size = 2) +
# set color manually
scale_color_manual(values = c('grey60', "#E69F00")) +
facet_grid(~ Method) +
# set limit x axis
xlim(0,0.2) +
ylim(0,1) +
# other theme
theme_bw() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=25)) +
labs(x = expression(alpha),
y = 'Classification metric value')
ggsave(width = 12, height = 6, here('Recidivism-tvb', 'Plots', 'Bounds_error_rates.pdf'))
rm(list=ls())
library(dplyr)
library(readr)
library(ggplot2)
library(here)
here()
source(here('Recidivism-tvb', 'Paper', 'Bounds', 'functions_bounds.R'))
raw.data <- read_csv(here('DATA', 'COMPAS', 'compas-scores-two-years.csv'),
col_types = cols()) %>%
filter(race == 'African-American' | race == 'Caucasian')
# Filter data
crime.data <- raw.data %>%
# filter(days_b_screening_arrest <= 30) %>%
# filter(days_b_screening_arrest >= -30) %>%
filter(two_year_recid != -1) %>%
filter(c_charge_degree != "O") %>%
filter(score_text != 'N/A')
# Length of stay column
crime.data$length_of_stay <- as.numeric(as.Date(crime.data$c_jail_out) - as.Date(crime.data$c_jail_in))
# Reduce to just white and black defendants
df <- crime.data %>%
filter(race %in% c("African-American", "Caucasian")) %>%
mutate(race = factor(race))
# Extract data of interest
df.sub <- df %>%
select(race, decile_score, two_year_recid)  %>%
# add Propublica's low/high scores
mutate(risk = ifelse(decile_score > 4, 1, 0))
# create tables
tb_race <- list(White = df.sub %>% filter(race == 'Caucasian'),
Black = df.sub %>% filter(race == 'African-American')) %>%
# create table
purrr::map( ~ table(.x$two_year_recid, .x$risk))
# compute metrics and reformat into df
metric <- list(FPR = tb_race %>% purrr::map_dfr(~ fpr_compute(.x), .id = 'Race'),
FNR = tb_race %>% purrr::map_dfr(~ fnr_compute(.x), .id = 'Race'),
PPV = tb_race %>% purrr::map_dfr(~ ppv_compute(.x), .id = 'Race')
) %>%
#purrr::map( ~ .x %>%
#              dplyr::bind_rows(.id = 'Metric')) %>%
dplyr::bind_rows(.id = 'Metric') %>%
rename(Type = ind)
## plot
ggplot(metric %>%
filter((Race == 'Black' & Type == 'obs') | (Race == 'White' & Type != 'obs')),
aes(alpha, values)) +
# lines
geom_path(aes(alpha, values,
group = paste0(Race, Metric, Type),
linetype = Metric, col = Race),
size = 2) +
# set color manually
scale_color_manual(values = c('grey60', "#E69F00")) +
facet_grid(~ Method) +
# set limit x axis
xlim(0,0.2) +
ylim(0,1) +
# other theme
theme_bw() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=25)) +
labs(x = expression(alpha),
y = 'Classification metric value')
## plot
ggplot(metric %>%
filter((Race == 'Black' & Type == 'obs') | (Race == 'White' & Type != 'obs')),
aes(alpha, values)) +
# lines
geom_path(aes(alpha, values,
group = paste0(Race, Metric, Type),
linetype = Metric, col = Race),
size = 2) +
# set color manually
scale_color_manual(values = c('grey60', "#E69F00")) +
# set limit x axis
xlim(0,0.2) +
ylim(0,1) +
# other theme
theme_bw() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=25)) +
labs(x = expression(alpha),
y = 'Classification metric value')
ggsave(width = 12, height = 6, here('Recidivism-tvb', 'Plots', 'Bounds_error_rates.pdf'))
ggsave(width = 12, height = 6, here('Recidivism-tvb', 'Plots', 'Bounds_error_rates.pdf'))
metrics_alpha_1 <- list(tb_race, list(0.125, 0)) %>%
purrr::pmap( ~ .x %>% compute_metrics_alpha_1(.y)) %>%
dplyr::bind_rows(.id = 'Race') %>%
rename(Metric = ind)
# compute point where observed metric for whites = unobserved metric
positions_equality <- list(metrics = list(unique(compute_metrics_obs(tb_race$White)$value)[1],
unique(compute_metrics_obs(tb_race$White)$value)[2],
unique(compute_metrics_obs(tb_race$White)$value)[3]),
names = list('FNR', 'FPR', 'PPV')) %>%
#purrr::pmap( ~ print(paste(.x, .y)))
purrr::pmap( ~ which(round(.x,3) == round(metrics_alpha_1$values,3) & metrics_alpha_1$Race == 'White' & metrics_alpha_1$Metric == .y)[1]) %>%
unlist()
## plot
ggplot(metrics_alpha_1,
aes(alpha_1, values)) +
# lines
geom_path(aes(alpha_1, values,
group = paste0(Race, Metric),
linetype = Metric, col = Race),
size = 2) +
# set color manually
scale_color_manual(values = c('grey60', "#E69F00")) +
# observed metrics for whites
geom_point(data=(metrics_alpha_1 %>% filter(Race == 'White'))[positions_equality,],
aes(alpha_1, values),
size = 4
) +
# set limit x axis
scale_x_continuous(limits = c(0,0.13),
breaks = seq(0,0.12, by = 0.04)) +
ylim(0,1) +
# other theme
theme_bw() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=25)) +
labs(x = expression(alpha['1']),
y = 'Classification metric value')
ggsave(width = 12, height = 6, here('Recidivism-tvb', 'Plots', 'Metric_disp_alpha.pdf'))
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Bounds_calibration_logistic_COMPAS.R', echo=TRUE)
# plot
ggplot(bounds) +
ylab('Race (Caucasian) coefficient') +
xlab(expression(alpha)) +
geom_ribbon(data=bounds, aes(x=Gamma, ymin=lb, ymax=ub),alpha=0.6,fill="grey80") +
geom_line(aes(x=Gamma, y=lb)) +
geom_line(aes(x=Gamma, y=ub)) +
geom_point(data=grid_output,
mapping=aes(Gamma, Coef_Race, color=as.factor(Significance)),
inherit.aes = FALSE, size=2) +
theme_bw() +
guides(color=FALSE) +
scale_color_manual(values=c('forestgreen', 'orange', 'red')) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=25))
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Bounds_calibration_logistic_COMPAS.R', echo=TRUE)
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Bounds_calibration_logistic_COMPAS.R', echo=TRUE)
ggsave(width = 12, height = 6, here('Recidivism-tvb', 'Plots', 'Logistic_bounds_race_COMPAS.pdf'))
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Bounds_calibration_logistic_SC.R', echo=TRUE)
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Bounds_calibration_logistic_SC.R', echo=TRUE)
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Simulations/Bounds.R', echo=TRUE)
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Simulations/Bounds.R', echo=TRUE)
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Simulations/Bounds.R', echo=TRUE)
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Bounds_calibration_logistic_SC.R', echo=TRUE)
# plot
ggplot(bounds) +
ylab('Race (Caucasian) coefficient') +
xlab(expression(alpha)) +
geom_ribbon(data=bounds, aes(x=Gamma, ymin=lb, ymax=ub),alpha=0.6,fill="grey80") +
geom_line(aes(x=Gamma, y=lb)) +
geom_line(aes(x=Gamma, y=ub)) +
geom_point(data=grid_output,
mapping=aes(Gamma, Coef_Race, color=as.factor(Significance)),
inherit.aes = FALSE, size=2) +
theme_bw() +
guides(color=FALSE) +
scale_color_manual(values=c('forestgreen', 'orange', 'red')) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=25))
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Simulations/Bounds.R', echo=TRUE)
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Simulations/Bounds.R', echo=TRUE)
rm(list=ls())
# ------------------------------------------------------------------------------
## load packages
library(dplyr)
library(readr)
library(ggplot2)
library(glmnet)
library(here)
library(future)
library(fastDummies)
library(purrr)
library(furrr)
here()
# ------------------------------------------------------------------------------
## load and subset data
df <- read_csv(here('DATA', 'PCS', 'pcs.csv')) %>%
filter(race_new == 'Black' | race_new == 'White') %>%
droplevels() %>%
filter(dofage >= 19, dofage <= 65) %>%
rename(y = yr3arrest)
library(vroom)
df$install.packages('vroom')
install.packages('vroom')
library(vroom)
df <- vroom(here('DATA', 'PCS', 'pcs.csv')) %>%
filter(race_new == 'Black' | race_new == 'White') %>%
droplevels() %>%
filter(dofage >= 19, dofage <= 65) %>%
rename(y = yr3arrest)
df$ArrestDate1
df$yr3_end_date
df$JPR_LASTUPDATE
max(df$yr3_end_date)
min(df$yr1_end_date)
df$ArrestDate1
max(df$ArrestDate1)
max(df$ArrestDate1, na.rm = T)
min(df$ArrestDate1, na.rm = T)
df$rearrest_date
min(df$rearrest_date)
min(df$rearrest_date, na.rm = T)
df$SUBMIT_DATE
min(df$SUBMIT_DATE)
max(df$SUBMIT_DATE)
source('~/Desktop/CMU/projects/Recidivism-tvb/Paper/Bounds/Bounds_error_rates.R', echo=TRUE)
rm(list=ls())
# ------------------------------------------------------------------------------
## load packages
library(dplyr)
library(readr)
library(ggplot2)
library(vroom)
library(glmnet)
library(here)
library(future)
library(fastDummies)
library(purrr)
library(furrr)
here()
# ------------------------------------------------------------------------------
## load and subset data
df <- vroom(here('DATA', 'PCS', 'pcs.csv')) %>%
filter(race_new == 'Black' | race_new == 'White') %>%
droplevels() %>%
filter(dofage >= 19, dofage <= 65) %>%
rename(y = yr3arrest)
max(df$yr3_end_date)
sort(df$yr3_end_date)
re(sort(df$yr3_end_date))
rev(sort(df$yr3_end_date))
